MarineShine - Technical Documentation

Table of Contents
1. System Overview
2. Architecture
3. Database Schema
4. Technology Stack
5. API Specifications
6. Security Features

1. System Overview
=================
MarineShine is a NestJS-based backend service that facilitates connections between boat owners and cleaning service providers through an auction-based system. The platform enables auctioneers (boat owners) to post cleaning jobs and bidders (service providers) to bid on these jobs.

2. Architecture
==============

2.1 System Components
--------------------
- Authentication Service
- Job Post Management
- Bidding System
- Job Management
- Chat System
- Review System

2.2 UML Class Diagram
--------------------
[Class Diagram]

User
+ id: number
+ email: string
+ password: string
+ first_name: string
+ last_name: string
+ user_type: string
+ profile_pic: string
+ bidder: Bidder
+ auctioneer: Auctioneer

Auctioneer
+ id: number
+ company_name: string
+ contact_number: string
+ address: string
+ user: User
+ jobPosts: JobPost[]
+ jobs: Job[]

Bidder
+ id: number
+ title: string
+ bio_description: string
+ contact_number: string
+ address: string
+ latitude: number
+ longitude: number
+ user: User
+ bids: Bid[]
+ jobs: Job[]

JobPost
+ id: number
+ auctioneer: Auctioneer
+ boatLength: number
+ additionalServices: string[]
+ notes: string
+ location: Location
+ preferredDate: string
+ max_bid_amount: number
+ bid_start_date: Date
+ bid_end_date: Date
+ job_start_date: Date
+ job_end_date: Date
+ bids: Bid[]

3. Database Schema
=================

3.1 Tables
----------

users
- id (PK)
- email (UK)
- password
- first_name
- last_name
- user_type
- profile_pic

auctioneers
- id (PK)
- user_id (FK)
- company_name
- contact_number
- address

bidders
- id (PK)
- user_id (FK)
- title
- bio_description
- contact_number
- address
- latitude
- longitude

job_posts
- id (PK)
- auctioneer_id (FK)
- boat_length
- additional_services
- notes
- location
- preferred_date
- max_bid_amount
- bid_start_date
- bid_end_date
- job_start_date
- job_end_date

bids
- id (PK)
- job_post_id (FK)
- bidder_id (FK)
- bid_amount
- negotiation
- message

jobs
- id (PK)
- auctioneer_id (FK)
- bidder_id (FK)
- bid_id (FK)
- job
- job_start_date
- job_end_date
- payment_amount
- payment_status

reviews
- id (PK)
- job_id (FK)
- rating
- review

chat_rooms
- id (PK)
- bid_id (FK)
- job

4. Technology Stack
==================

4.1 Core Framework
-----------------
- NestJS v10.2.8
- TypeScript v5.2.2

4.2 Database
-----------
- PostgreSQL
- TypeORM v0.3.17

4.3 Authentication & Security
---------------------------
- @nestjs/jwt v10.1.1
- @nestjs/passport v10.0.2
- passport v0.6.0
- passport-jwt v4.0.1
- passport-local v1.0.0

4.4 Validation & Transformation
-----------------------------
- class-validator v0.14.0
- class-transformer v0.5.1

4.5 Web Server
-------------
- @nestjs/platform-express v10.2.8
- cookie-parser v1.4.6
- express-session v1.17.3

4.6 View Engine
-------------
- ejs v3.1.9

5. API Specifications
====================

5.1 Authentication Endpoints
--------------------------

POST /auth/register
Request:
{
  first_name: string
  last_name: string
  email: string
  password: string
  user_type: 'bidder' | 'auctioneer'
}

POST /auth/login
Request:
{
  email: string
  password: string
}

5.2 Job Posts Endpoints
---------------------

POST /job-posts
Request:
{
  boatLength: number
  additionalServices: string[]
  notes?: string
  location?: {
    address: string
    latitude: number
    longitude: number
  }
  preferredDate?: string
  max_bid_amount?: number
  bid_start_date?: Date
  bid_end_date?: Date
  job_start_date?: Date
  job_end_date?: Date
}

GET /job-posts/nearby
Query Parameters:
{
  radius?: number
  boatLengthFrom?: number
  boatLengthTo?: number
  additionalServices?: string
}

5.3 Bids Endpoints
----------------

POST /bids
Request:
{
  jobPostId: number
  bid_amount: number
  message?: string
}

5.4 Jobs Endpoints
----------------

POST /jobs/from-bid
Request:
{
  bidId: number
}

GET /jobs/calendar
Query Parameters:
{
  month: number
  year: number
}

6. Security Features
===================

6.1 Authentication
----------------
- JWT-based authentication
- Password hashing using SHA-256
- HTTP-only cookies for token storage

6.2 Authorization
---------------
- Role-based access control
- Route guards
- Resource ownership validation

6.3 Data Protection
-----------------
- Input validation
- Request sanitization
- CORS protection
- Rate limiting

6.4 Error Handling
----------------
Standard error response format:
{
  success: boolean
  message: string
  error?: {
    code: string
    details?: string
  }
}

Common error codes:
- UNAUTHORIZED
- NOT_FOUND
- BAD_REQUEST
- INTERNAL_ERROR